<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xkw.repository.StudentRepository">

    <sql id="condition">
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="name != null and name != ''">
                AND name like concat('%', #{name}, '%')
            </if>
            <if test="gender != null and gender != ''">
                AND gender = #{gender}
            </if>
            <if test="className != null and className != ''">
                AND class_name like concat('%', #{className}, '%')
            </if>
            <if test="dormitory != null and dormitory != ''">
                AND dormitory = #{dormitory}
            </if>
            <if test="source != null and source != ''">
                AND source = #{source}
            </if>
        </where>
    </sql>

    <select id="getAll" resultType="com.xkw.domain.Student">
        SELECT *
        FROM student
    </select>

    <select id="getByParam" resultType="com.xkw.domain.Student">
        select * from student
        <include refid="condition"/>
        limit #{start}, #{pageSize}
    </select>

    <select id="countByParam" resultType="int">
        select count(*) from student
        <include refid="condition"/>
        order by id
    </select>

    <insert id="add" parameterType="com.xkw.domain.Student" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into student
        value (null, #{name}, #{age}, #{gender}, #{cardId}, #{className}, #{hometown},
         #{nation}, #{contact}, #{emergencyContact}, #{graduateSchool},
          #{graduateTime}, #{specialty}, #{score}, #{dormitory}, #{source}, now(), now())
    </insert>

    <update id="update" parameterType="com.xkw.domain.Student">
        update student
        set name = #{name},
            age = #{age},
            gender = #{gender},
            card_id = #{cardId},
            hometown = #{hometown},
            nation = #{nation},
            contact = #{contact},
            emergency_contact = #{emergencyContact},
            graduate_school = #{graduateSchool},
            graduate_time = #{graduateTime},
            specialty = #{specialty},
            score = #{score},
            dormitory = #{dormitory},
            source = #{dormitory},
            update_time = now()
        where id = #{id}
    </update>

    <delete id="delete" parameterType="int">
        delete from student
        where id = #{id}
    </delete>
</mapper>
